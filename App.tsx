
import React, { useState, useCallback } from 'react';
import { TALISMANS } from './constants';
import { Talisman } from './types';
import { generateTalismanImage } from './services/geminiService';
import Header from './components/Header';
import TalismanSelector from './components/TalismanSelector';
import ImageDisplay from './components/ImageDisplay';
import GenerateButton from './components/GenerateButton';

const App: React.FC = () => {
  const [selectedTalisman, setSelectedTalisman] = useState<Talisman | null>(null);
  const [generatedImageUrl, setGeneratedImageUrl] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  const handleSelectTalisman = (talisman: Talisman) => {
    setSelectedTalisman(talisman);
    setGeneratedImageUrl(null);
    setError(null);
  };

  const handleGenerateClick = useCallback(async () => {
    if (!selectedTalisman) {
      setError('부적 종류를 먼저 선택해주세요.');
      return;
    }

    setIsLoading(true);
    setError(null);
    setGeneratedImageUrl(null);

    try {
      const imageUrl = await generateTalismanImage(selectedTalisman.prompt);
      setGeneratedImageUrl(imageUrl);
    } catch (err) {
      console.error(err);
      setError('이미지 생성에 실패했습니다. 잠시 후 다시 시도해주세요.');
    } finally {
      setIsLoading(false);
    }
  }, [selectedTalisman]);

  const handleDownload = () => {
    if (!generatedImageUrl || !selectedTalisman) return;
    const link = document.createElement('a');
    link.href = generatedImageUrl;
    link.download = `${selectedTalisman.name}_부적.jpeg`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  return (
    <div className="min-h-screen bg-zinc-900 text-white flex flex-col items-center p-4 sm:p-6 md:p-8">
      <div className="w-full max-w-4xl mx-auto flex flex-col md:flex-row gap-8">
        
        <main className="w-full md:w-1/2 flex flex-col items-center">
          <Header />
          <TalismanSelector
            talismans={TALISMANS}
            selectedTalismanId={selectedTalisman?.id ?? null}
            onSelect={handleSelectTalisman}
          />
          <GenerateButton
            onClick={handleGenerateClick}
            isLoading={isLoading}
            isSelected={!!selectedTalisman}
          />
        </main>

        <aside className="w-full md:w-1/2 flex flex-col items-center justify-center gap-4">
          <ImageDisplay
            imageUrl={generatedImageUrl}
            isLoading={isLoading}
            error={error}
            talismanName={selectedTalisman?.name}
          />
          {generatedImageUrl && !isLoading && !error && (
            <button
                onClick={handleDownload}
                className="w-full max-w-sm py-3 px-6 bg-white text-zinc-900 font-bold transition-colors duration-300 hover:bg-zinc-300"
            >
                Save Bujeok
            </button>
          )}
        </aside>

      </div>
       <footer className="w-full max-w-4xl mx-auto text-center text-zinc-500 text-xs mt-8">
          <p>AI가 생성한 부적은 오락용이며, 실제 효력을 보장하지 않습니다.</p>
          <p>Generated by Imagen 3 & Gemini with design.dobe</p>
        </footer>
    </div> 
  );
};

export default App;
